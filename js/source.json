{
   "posts":[             
        {
         "id":1,
         "date":"29 de Febrero de 2020",
         "title":"Conoce tus documentos",
         "description":" Mediante Azure Cognitive Search podremos extraer información de los documentos extraiga información de los documentos y un bot que te muestre esos documentos por palabras clave de búsqueda",
         "image":"images/bot-framework.png",
         "url":"boot-framework-azure-cognitive-search.html",
         "folder":"AI",
         "content":[],
         "tags":["Vue","React","Azure","Static Apps","App Service"]
        },
        {
            "id":2,
            "date":"5 de Septiembre de 2020",
            "title":"Testeando Azure computer vision",
            "description":"Cómo conectar al servicio cognitivo de azure, algo de código de ejemplo",
            "image":"images/cognitive-services.png",
            "url":"azure-cognitive-services-api.html",
            "folder":"AI", 
            "content":[],
            "tags":["Vue","React","Azure","Static Apps","App Service"]        
        },
        {
            "id":3,
            "date":"9 de Octubre de 2020",
            "title":"Publicar una app de Vue / React en Azure",
            "description":"Que opciones tenemos para publicar una app de Vue / React en Azure podemos usar un appservice o una web estática",
            "image":"images/static-apps.png",
            "url":"vue-or-react-azure-static-app.html",
            "folder":"Azure",
            "content":[
             {"type":"t", "text":"#1. Crear app services"},
             {"type":"p", "text":"Actualmente para desplegar una aplicación Vue o React tenemos diferentes opciones en Azure, pero ¿cuál es la mejor? depende de tus necesidades, yo sin duda me quedo con el servicio que actualmente encontramos en preview pero vamos al detalle"},
             {"type":"", "text":"<img src=\"images/vue-react-app-appservice-linux.png\" alt=\"\" class=\"img-fluid\">"},
             {"type":"", "text":"Podemos generar un app services en linux estableciendo la pila de ejecución del entorno a node, también podemos generar este appservice en windows pero para ello deberemos seguir las instrucciones de <a href=\"https://www.returngis.net/2019/03/desplegar-una-web-app-con-react-js-a-traves-de-azure-devops-en-app-service/\">Gisela Torres</a> en la que deberemos incluir un web.config similar al que se muestra a continuación: "},
             {"type":"", "text":"<img src=\"images/react-web-config.png\" alt=\"\" class=\"img-fluid\">"},
             {"type":"t", "text":"#2. Crear apliación estática"},
             {"type":"", "text":"Yo prefiero esta opción ya que existe la posibilidad que un app service de linux no se aprovisione correctamente, y el coste de un app service puede ser elevado, cuando lo único que necesitamos es renderizar unas pocas páginas, este servicio es totalmente gratuito y se encuentra en preview"},
             {"type":"", "text":"<img src=\"images/vue-react-app-static-pages.png\" alt=\"\" class=\"img-fluid\">"},
             {"type":"", "text":"Para ello generaremos una aplcación estatica que conectaremos con nuestro repositorio de github tal y cómo muestra la imagen anterior, en la opción de compilación selecionaremos el motor en el que se basa nuestra aplicación, que permite los siguientes:<ul><li>Angular</li><li>React</li><li>Vue.js</li><li>Blazor</li><li>Gatsby</li><li>Hugo</li><li>VuePress</li><li>Custom</li></ul>"},
             {"type":"", "text":"Una vez generado, tarda unos minutos en ser visible, pero ya tenemos nuestra app vue / react funcionando con normalidad, si necesitamos que esté en un appservice una solución alternativa sería generar una applicación mvc en netcore y configurar el SPA de la siguiente forma: "},
             {"type":"", "text":"<img src=\"images/mvc-static-app-configuration.png\" alt=\"\" class=\"img-fluid\">"},
             {"type":"", "text":"de esta forma aprovisionamos mediante appservice"}
             ],
            "tags":["Vue","React","Azure","Static Apps","App Service"]
        },        
        {
            "id":4,
            "date":"03 de Noviembre de 2020",
            "title":"Crear tarjetas customizadas en Bot Framework Composer",
            "description":"Utilizando https://adaptivecards.io/designer/ podemos generar tarjetas customizadas y aplicar este diseño en bot framework composer",
            "image":"images/composer.png",
            "url":"bot-framework-composer-adaptive-cards.html",
            "folder":"bot framework",
            "content":[
             {"type":"t", "text":"#1. Crear un nuevo diálogo"},
             {"type":"p", "text":"Para ello dentro de Bot Framework Composer hemos de realizar la acción ADD / Add new dialog"},
             {"type":"", "text":"<img src=\"images/add-new-dialog-bot-framework.png\" alt=\"\" class=\"img-fluid\">"},
             {"type":"", "text":"Una vez tenemos el diálogo debemos establecer el nombre y la descripción, es este caso lo vamos a llamar customcard  "},
             {"type":"", "text":"<img src=\"images/define-conversation-objective-bot-framework.png\" alt=\"\" class=\"img-fluid\">"},
             {"type":"t", "text":"#2. Generar la respuesta"},
             {"type":"", "text":"Una vez hemos creado el diálogo agregaremos una respuesta presionando el botón <b>+</b> que encontramos en la siguiente imagen, agregando una respuesta e introduciremos un texto cualquiera en la respuesta"},
             {"type":"", "text":"<img src=\"images/add-response-bot-framework.png\" alt=\"\" class=\"img-fluid\">"},
             {"type":"", "text":"Ya tenemos un componente que podemos agregar a nuestro diálogo principal, pero aún no es una tarjeta customizada, deberemos ir a la sección de bot responses y ahí seleccionar nuestro diálogo llamado customcard, en ella veremos lo siguiente:"},
             {"type":"", "text":"<img src=\"images/bot-responses-bot-framework.png\" alt=\"\" class=\"img-fluid\">"},
             {"type":"", "text":"Ahora el siguiente paso es ir a adaptivecards y generar la tarjeta que queramos mostrar en nuestro bot, una vez la tengamos en el cad payload editor tendremos el json que debermos agregar en la respuesta.<br> Si agregamos este json directamente nos dará un error para solventarlo deberemos hacer que la respuesta interprete el json cómo un string y no cómo un objeto"},
             {"type":"", "text":"deberemos seleccionar la respuesta y activar el botón edit mode, este nos mostrará un texto parecido a este <pre><code>[import](common.lg)<br># SendActivity_ViTR8q()<br>- Respuesta</code></pre>"},
             {"type":"", "text":"dónde # SendActivity_ViTR8q hace referencia al método de respuesta que ejecutará nuestra actividad, ahora crearemos una respuesta de la siguiente forma:"},
             {"type":"", "text":"<pre><code>#customcardjson<br>-``` { json custom card / cad payload editor } ```</code></pre>"},
             {"type":"", "text":"fijaros que la respuesta empieza con <b>-``` y finaliza con ```</b> esto es muy importante ya que de esta forma le estamos indicando que ese json lo trate cómo string"},
             {"type":"", "text":"después generaremos una nueva sección que incluya el parseo del json que tenemos en el string de esta forma podremos redenderizar la tarjeta"},
             {"type":"", "text":"<pre><code># CustomCard<br>[Activity<br><tab>    Attachments = ${json(customcardjson())}<br>]</pre></code>"},
             {"type":"", "text":"y por último en el método que hemos mencionado al principio cambiaremos <b>-Respuesta</b> por <b>$-{CustomCard()}</b>"},
             {"type":"", "text":"es muy importante que veas al inicio del editor esto: <b>[import](common.lg)</b> si no lo ves ponlo ya que sino no podrá procesar el json y generar la tarjeta personalizada."},
             {"type":"", "text":"quedando todo el código de esta forma:<br>"},
             {"type":"", "text":"<pre><code>[import](common.lg)<br># SendActivity_ViTR8q()<br>- ${CustomCard()}<br># CustomCard<br>[Activity<br>  Attachments = ${json(customcardjson())}<br>]<br>#customcardjson<br>-``` <br>{ <br> \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\", <br> \"type\": \"AdaptiveCard\", <br> \"version\": \"1.0\", <br> \"body\": [ <br> { <br> \"type\": \"Image\", <br> \"url\": \"https://secure.meetupstatic.com/photos/event/9/5/0/f/highres_468758159.jpeg\", <br> \"size\": \"stretch\" <br> }, <br> { <br> \"type\": \"TextBlock\", <br> \"spacing\": \"medium\", <br> \"size\": \"default\", <br> \"weight\": \"bolder\", <br> \"text\": \"Bienvenido al assitente virtual de Catzure!\", <br> \"wrap\": true, <br> \"maxLines\": 0 <br> }, <br> { <br> \"type\": \"TextBlock\", <br> \"size\": \"default\", <br> \"isSubtle\": true, <br> \"text\": \"A continuación tienes disponible información sobre nosotros\", <br> \"wrap\": true, <br> \"maxLines\": 0 <br> } <br> ], <br> \"actions\": [ <br> { <br> \"type\": \"Action.OpenUrl\", <br> \"title\": \"NetCoreConf - Un pedazo de evento\", <br> \"url\": \"https://netcoreconf.com/\" <br> }, <br> { <br> \"type\": \"Action.OpenUrl\", <br> \"title\": \"Agenda eventos\", <br> \"url\": \"https://www.meetup.com/es-ES/CATzure/\" <br> }, <br> { <br> \"type\": \"Action.OpenUrl\", <br> \"title\": \"Siguenos en twitter y subscribete en nuestro canal de Youtube\", <br> \"url\": \"https://www.youtube.com/channel/UCjH-d3eG2yFcVpx8i-K2Zkw/featured\" <br> } <br> ] <br>}```</code></pre>"},
             {"type":"", "text":"Si lo hemos realizado correctamente y salimos del modo editor de respuesta de bot responses veremos que en customcard tendremos tres respuestas que son los segmentos que hemos creado en los pasos anteriores:<br>"},
             {"type":"", "text":"<img src=\"images/final-responses-bot-framework.png\" alt=\"\" class=\"img-fluid\">"}
             ],
            "tags":["custom cards","adaptive cards","Bot Framework","Azure bot"]
        }        
   ]
}